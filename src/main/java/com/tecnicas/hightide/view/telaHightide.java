/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tecnicas.hightide.view;

import com.tecnicas.hightide.controller.MusicController;
import com.tecnicas.hightide.controller.MusicPlayerController;
import com.tecnicas.hightide.controller.QueueController;
import com.tecnicas.hightide.model.models.Musica;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import javax.swing.DefaultListModel;

/**
 *
 * @author Usuario
 */
public class telaHightide extends javax.swing.JFrame {

    /**
     * Creates new form telaHightide
     */
    DefaultListModel listModel = new DefaultListModel();
    MusicController musicController;
    QueueController queue;
    MusicPlayerController player;
    Musica musicaSelecionada = null;
    
    public telaHightide() {
        initComponents();
        musicController = new MusicController();
        List<Musica> musicsObjectList = new ArrayList<>(musicController.listAllMusics());
        queue = new QueueController(musicsObjectList);
        player = new MusicPlayerController(queue);
        for (Musica musica : musicsObjectList) {
            listModel.addElement(musica.getTitulo() + " - " + musica.getArtista());
        }
        musicsList.setModel(listModel);
        playButton.setText("PLAY");
        playButton.setEnabled(false);
        nextMusicButton.setEnabled(false);
        previousMusicButton.setEnabled(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        musicsList = new javax.swing.JList<>();
        playButton = new javax.swing.JToggleButton();
        labelArtistaAtual = new javax.swing.JLabel();
        labelMusicaAtual = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nextMusicButton = new javax.swing.JButton();
        previousMusicButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HighTide");
        setBackground(new java.awt.Color(0, 0, 255));
        setResizable(false);

        musicsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                musicsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(musicsList);

        playButton.setText("PLAY");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        labelArtistaAtual.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelArtistaAtual.setText("-");

        labelMusicaAtual.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelMusicaAtual.setText("-");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 204, 0));
        jLabel1.setText("HighTide");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Todas as mÃºsicas");

        nextMusicButton.setText(">>");
        nextMusicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMusicButtonActionPerformed(evt);
            }
        });

        previousMusicButton.setText("<<");
        previousMusicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousMusicButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("musicaAtual:");

        jLabel4.setText("musicaSelecionada:");

        jLabel5.setText("isPlaying:");

        jLabel6.setText("jLabel6");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelMusicaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelArtistaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(previousMusicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nextMusicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labelMusicaAtual)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelArtistaAtual)
                                .addGap(63, 63, 63))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(playButton)
                                    .addComponent(nextMusicButton)
                                    .addComponent(previousMusicButton))
                                .addGap(46, 46, 46))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // funÃ§Ã£o responsÃ¡vel por ajustar o botÃ£o de acordo com o estado do player
    private void managePlayButton() {
        if (playButton.isEnabled() == false || nextMusicButton.isEnabled() == false || previousMusicButton.isEnabled() == false) {
            playButton.setEnabled(true);
            nextMusicButton.setEnabled(true);
            previousMusicButton.setEnabled(true);
        }
        // se o player seleciona uma mÃºsica diferente da atual, ou nÃ£o hÃ¡ mÃºsica atual ainda
        if (player.getMusicaAtual() != null) {
            if (!musicaSelecionada.getTitulo().equals(player.getMusicaAtual().getTitulo())) { 
                playButton.setText("PLAY");
                playButton.setSelected(false);
            } else { // player estÃ¡ com a mÃºsica atual selecionada
                if (player.getIsPlaying() == true) { // ela estÃ¡ tocando
                    playButton.setText("PAUSE");
                    playButton.setSelected(true);
                } else { // ela nÃ£o estÃ¡ tocando
                    playButton.setText("PLAY");
                    playButton.setSelected(false);
                }
            }
        } else {
            playButton.setText("PLAY");
            playButton.setSelected(false);
        }
    }
    
    private void musicsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_musicsListValueChanged
        musicaSelecionada = musicController.musicByTitle(musicsList.getSelectedValue().split(" - ")[0]);
        managePlayButton();
        jLabel7.setText(musicaSelecionada.getTitulo());
    }//GEN-LAST:event_musicsListValueChanged

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if (player.getMusicaAtual() == null) {
            labelMusicaAtual.setText(musicaSelecionada.getTitulo());
            labelArtistaAtual.setText(musicaSelecionada.getArtista());
            player.tocarMusica(musicaSelecionada);
            managePlayButton();
            jLabel6.setText(player.getMusicaAtual().getTitulo());
            jLabel8.setText(player.getIsPlaying().toString());
            return;
        }
        if (!musicaSelecionada.getTitulo().equals(player.getMusicaAtual().getTitulo())) {
            labelMusicaAtual.setText(musicaSelecionada.getTitulo());
            labelArtistaAtual.setText(musicaSelecionada.getArtista());
            player.pararMusica();
            player.tocarMusica(musicaSelecionada);
            managePlayButton();
        } else {
            if (player.getIsPlaying() == true) {
                player.pausarMusica();
                managePlayButton();
            } else {
                player.retomarMusica();
                managePlayButton();
            }
        }
       jLabel6.setText(player.getMusicaAtual().getTitulo());
       jLabel8.setText(player.getIsPlaying().toString());
    }//GEN-LAST:event_playButtonActionPerformed

    private void nextMusicButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int currentIndex = musicsList.getSelectedIndex(); // ObtÃ©m o Ã­ndice atual
        if (currentIndex < musicsList.getModel().getSize() - 1) { // Verifica se nÃ£o Ã© o Ãºltimo item
            musicsList.setSelectedIndex(currentIndex + 1); // Move para o prÃ³ximo item
        } else {
            musicsList.setSelectedIndex(0);
        }
        player.proximaMusica();
        updateCurrentMusicInfo();
        managePlayButton();
    }                                               
    
    private void previousMusicButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        int currentIndex = musicsList.getSelectedIndex(); // ObtÃ©m o Ã­ndice atual
        if (currentIndex > 0) { // Verifica se nÃ£o Ã© o primeiro item
            musicsList.setSelectedIndex(currentIndex - 1); // Move para o item anterior
        } else {
            musicsList.setSelectedIndex(musicsList.getModel().getSize() - 1);
        }
        player.musicaAnterior();
        updateCurrentMusicInfo();
        managePlayButton();
    }     
    
    // MÃ©todo auxiliar para atualizar as informaÃ§Ãµes da mÃºsica atual
    private void updateCurrentMusicInfo() {
        if (musicaSelecionada != null) {
            labelMusicaAtual.setText(musicaSelecionada.getTitulo());
            labelArtistaAtual.setText(musicaSelecionada.getArtista());
        }
    }

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {}
     // Criando um JPanel

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelArtistaAtual;
    private javax.swing.JLabel labelMusicaAtual;
    private javax.swing.JList<String> musicsList;
    private javax.swing.JButton nextMusicButton;
    private javax.swing.JToggleButton playButton;
    private javax.swing.JButton previousMusicButton;
    // End of variables declaration//GEN-END:variables
}
